// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model GenericEphemeral {
  key   String @unique
  value String
}

model GenericPersistent {
  key   String @unique
  value String
}

model Team {
  number        String              @unique
  name          String
  city          String
  state         String
  country       String
  ageGroup      String
  checkIn       CheckIn?
  checkedPoints CheckedInspection[]
  selection     AllianceSelectionStatus?
  raking        QualRankings?
}

model CheckIn {
  team       Team   @relation(fields: [teamNumber], references: [number])
  teamNumber String @unique
  status     String
}

model InspectionGroup {
  name     String               @unique
  criteria InspectionCriteria[]
}

model InspectionCriteria {
  id        Int                 @id @default(autoincrement())
  group     InspectionGroup     @relation(fields: [groupName], references: [name])
  groupName String
  text      String              @unique
  met       CheckedInspection[]
  program   String?
}

model CheckedInspection {
  team       Team               @relation(fields: [teamNumber], references: [number])
  teamNumber String
  criteria   InspectionCriteria @relation(fields: [criteriaId], references: [id])
  criteriaId Int

  @@unique([teamNumber, criteriaId])
}

model QualRankings {
  divisionId Int
  team Team @relation(fields: [teamNumber], references: [number])
  teamNumber String @unique
  ranking Int
}

model EliminationAlliance {
  divisionId    Int
  seed          Int
  captainNumber String
  pickNumber    String

  @@unique([captainNumber, pickNumber])
  @@unique([divisionId, seed])
}

model AllianceSelectionStatus {
  divisionId  Int
  team        Team    @relation(fields: [teamNumber], references: [number])
  teamNumber  String  @unique
  status      String
  // TODO status enum:
  // captain: currently inviting
  // invited: invited by captain
  // eligible: may be picked but not be captain
  // remaining: can be both picked or be captain

  @@unique([divisionId, teamNumber]) // TODO necessary/nice?
}

model AllianceSelectionAction {
  divisionId  Int @unique
  teamNumber  String
  action      String
  datestamp Int // epoch
  // TODO action enum
}

model AllianceSelectionCurrentPick {
  divisionId Int @unique
  currentPickedTeam String
}